# Start with Node.js base image
FROM node:18

# Install Python 3 and pip (trying multiple methods for compatibility)
RUN apt-get update && \
    apt-get install -y python3 python3-pip python3-venv curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create symbolic links for easier access
RUN ln -sf /usr/bin/python3 /usr/bin/python || true

# Set working directory
WORKDIR /app

# Copy and install Node.js dependencies first (for better caching)
COPY package*.json ./
RUN npm install

# Copy Python requirements and install them
COPY requirements.txt ./

# Install Python packages with multiple fallback methods
RUN python3 -m pip install --upgrade pip || pip3 install --upgrade pip
RUN python3 -m pip install --no-cache-dir -r requirements.txt || pip3 install --no-cache-dir -r requirements.txt

# Verify Python packages installation and show paths for debugging
RUN echo "=== Python Installation Debug ===" && \
    which python3 || echo "python3 not found in PATH" && \
    which python || echo "python not found in PATH" && \
    python3 --version || echo "python3 version check failed" && \
    python3 -c "import sys; print('Python executable:', sys.executable)" || echo "Python executable check failed" && \
    python3 -c "import pandas; print('pandas version:', pandas.__version__)" || echo "pandas import failed" && \
    python3 -c "import mlxtend; print('mlxtend version:', mlxtend.__version__)" || echo "mlxtend import failed" && \
    echo "=== End Debug ==="

# Copy the rest of your app
COPY . .

# Create a simple test script to verify Python setup at runtime
RUN echo '#!/usr/bin/env python3\nimport sys, pandas as pd, mlxtend\nprint("Python setup OK:", sys.executable)\nprint("pandas:", pd.__version__)\nprint("mlxtend:", mlxtend.__version__)' > test_python_setup.py && \
    chmod +x test_python_setup.py

# Expose your app's port
EXPOSE 8080

# Start the Node.js app
CMD ["node", "app.js"]